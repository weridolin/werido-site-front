├── build/                      # webpack配置参数文件
│   └── ...
├── src/                        # 项目代码入口
│   │
│   ├── components              # 多个项目共享的组件
│   ├── utils                   # 多个项目共享的工具库
│   ├── assets                  # 多个项目共享的静态资源
│   │
│   └── pages                   # 多个项目页面划分
│       ├── page1/              # 第一个页面或者应用
│       │   ├── main.js         # 页面/应用入口文件
│       │   ├── components      # 该页面/应用自身的组件
│       │   ├── utils           # 该页面/应用自身的工具库
│       │   ├── main.js         # 页面/应用入口文件
│       │   └── ...
│       └── page2/              # 第二个页面或者应用
│       │   ├── main.js         # 页面/应用入口文件
│       │   └── ...
│       └── pageN/              # 第N个页面或者应用
│           ├── main.js         # 页面/应用入口文件
│           └── ...
├── dist/                       # 项目打包代码
│   ├── page1/                  # 第一个页面或者应用
│   │   ├── [hash].js
│   │   └── index.html          # 页面/应用入口文件
│   ├── page2/                  # 第二个页面或者应用
│   │   ├── [hash].js
│   │   └── index.html          # 页面/应用入口文件
│   └── pageN/                  # 第N个页面或者应用
│       ├── [hash].js
│       └── index.html          # 页面/应用入口文件
├── .babelrc                    # babel编译参数
├── index.html                  # 主页模板，所有的页面共用该index.html入口
└── package.json                # 项目文件，记载着一些命令和依赖还有简要的项目描述信息


### 多页面和单页面
- 首先我们得搞懂什么是多页面。我们都知道vue是典型的单页面应用，也就是只有一个入口文件（main.js和app.vue和index.html），
所有的路由都是基于这个入口文件来跳转的，因此也可理解为这个入口页面的子页面吧。这样我们就好理解多了。
因此可以这样理解，一个入口文件（main.js和app.vue和index.html）就一个单页面。
其他的都是在这个单页面内的路由出口展示的子页面，也就是路由跳转只在这个单页面内的子页面之间进行跳转。
我们平时所有的开发都是基于这个单页面进行开发的。那么多页面也好理解了，也就是多个入口（main.js和app.vue和index.html），
这样就有了多个单页面，单页面之间只能用a标签跳转，因此可以不用路由，单页面之内如果有子页面跳转那么在使用路由进行跳转。
这样我们在页面开发的时候就和平时开发一样的，只需要对多个单页面里面的子页面进行分别开发就行了，也就是等同于有了多套的main.js和app.vue和index.html。

### 每个PAGE里面都有一个APP.VUE和MAIN.JS  (原来是在SRC里面) 即入口改变了
故我们需要重新配置下，即在vue.config.js里面配置

